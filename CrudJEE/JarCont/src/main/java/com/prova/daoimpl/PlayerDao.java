package com.prova.daoimpl;

import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.prova.dao.IPlayerDao;
import com.prova.domain.Player;
import com.prova.dto.PlayerDTO;
import com.prova.utils.Query;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PlayerDao implements IPlayerDao {

	public void creatingPlayer(Connection conn) throws SQLException {
		Statement stmt = null;
		try {
			String createTable = "create table Player(" + "id int primary key generated by default as identity,"
					+ "name varchar(50) not null," + "surname varchar(50) not null," + "email varchar(50) not null,"
					+ "nickname varchar(50) not null," + "password varchar(50) not null," + "birth date not null"
					+ ");";
			stmt = conn.createStatement();
			stmt.executeUpdate(createTable);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			stmt.close();
		}

	}

	public void save(Connection conn, Player player) throws SQLException {
		PreparedStatement prst = null;
		try {
			prst = conn.prepareStatement(Query.SAVE);
			prst.setString(1, player.getNome());
			prst.setString(2, player.getCognome());
			prst.setString(3, player.getEmail());
			prst.setString(4, player.getUsername());
			prst.setString(5, player.getPassword());
			prst.setDate(6, Date.valueOf(player.getBirth()));

			prst.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			prst.close();
		}
	}

	public List<PlayerDTO> getAll(Connection conn) throws SQLException {
		Statement stmt = null;
		List<PlayerDTO> listOfAll = new ArrayList<>();
		try {
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(Query.GET_ALL);
			while (rs.next()) {
				PlayerDTO player = new PlayerDTO(rs.getString("name"), rs.getString("surname"), rs.getString("email"),
						rs.getString("nickname"), rs.getString("password"), rs.getString("birth"));
				listOfAll.add(player);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			stmt.close();
		}
		return listOfAll;
	}

	public PlayerDTO getById(Connection conn, int id) throws SQLException {
		PreparedStatement prst = null;
		PlayerDTO player = null;
		try {
			prst = conn.prepareStatement(Query.GET_BY_ID);
			prst.setInt(1, id);
			ResultSet rs = prst.executeQuery();
			while (rs.next()) {
			player = new PlayerDTO(rs.getString("name"), rs.getString("surname"), rs.getString("email"),
						rs.getString("nickname"), rs.getString("password"), rs.getString("birth"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			prst.close();
		}
		return player;

	}
	
	public void delete(Connection conn, int id) throws SQLException {
		PreparedStatement prst = null;
		
		try {
			prst = conn.prepareStatement(Query.DELETE);
			prst.setInt(1, id);
			prst.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			prst.close();
		}
	}
}
