(async function () {

    const numBank = document.getElementById("numBank");
    const stampaBank = document.getElementById("bankCodes");
    const numPan = document.getElementById("numPan");
    const stampaPan = document.getElementById("PanCodes");
    const btn = document.getElementById("btn");
    const btnUpdate = document.getElementById("btnUpdate");
    const nome = document.getElementById("nome");
    const description = document.getElementById("description");
    const stampaErrori = document.getElementById("stampaErrori");
    const radio1 = document.getElementsByName("enable");
    const radio2 = document.getElementsByName("multisession");
    const select = document.getElementById("select");
    const updateForm = document.getElementById("updateId");
    const url = "http://localhost:8080/api/banking"
    const error1 = 'INCORRECT BANK CODE';
    const error2 = 'PAN NOT START WITH THE UP NUMBER';
    let obj = {}
    let arrBankCode = [];
    let arrPanCode = [];


    //al caricamento della pagina fa due get sugli endPoint della rest che ritornano i bin e i bankCode e crea due array dinamici.
    window.onload = async () => {

        let jsonBankCode = await request(`${url}/bankCodes/findAllCodes`, 'GET', null, "");
        let jsonPanCode = await request(`${url}/bin/findAllBinValues`, 'GET', null, "");

        for (let i = 0; i < jsonBankCode.length; i++) {
            arrBankCode.push(jsonBankCode[i])
        }

        for (let i = 0; i < jsonPanCode.length; i++) {
            arrPanCode.push(jsonPanCode[i]);
        }
    };



    numBank.oninput = () => renderCode(numBank, stampaBank, "BankCode", arrBankCode)



    numPan.oninput = () => renderCode(numPan, stampaPan, "PanCode", arrPanCode)



    //const reload = () => window.location.reload()



    //stampa Dinamica dei Pan Code e dei Bank Code presenti nel db
    const renderCode = (elem, where, name, arr) => {

        let num = parseInt(elem.value);
        if (num == 0) {

            elem.value = "";
            elem.placeholder = "YOU CAN'T PUT 0 ELEMENT";

        } else if (num > arr.length) {

            elem.value = "";
            elem.placeholder = `YOU CAN PUT ONLY ${arr.length} ELEMENT`;

        } else {

            where.innerHTML = "";
            if (typeof num == "number") {

                where.innerHTML += `<label>${name} that are in the system: </label><br><br>`;
                arr.map(elem => where.innerHTML += `<li>${elem}</li>`);
                where.innerHTML += `<br>`;

            }

            for (let i = 0; i < num; i++) {

                where.innerHTML += `<label>${name} N${i + 1}</label><br>
                                <input type="number" class="input" name=${name}><br>`;

            }
        }
    }



    //verifica RadioButton
    const radioCheck = (radio, prop) => {
        for (let i = 0; i < radio.length; i++) {
            radio[i].checked == true ? obj[prop] = false : obj[prop] = true;
        }
    }



    //verifica CheckBox
    const checkBoxCheck = () => {
        const checkBox = document.getElementsByName("checkbox");
        let arr = [];
        for (let i = 0; i < checkBox.length; i++) {
            if (checkBox[i].checked)
                arr.push(parseInt(checkBox[i].value));
        }
        return arr;
    }



    //VerificaBankCode e PanCode
    const autogeneratedCheck = (elem, word, array) => {
        const autogenerated = document.getElementsByName(elem);
        let arr = [];
        let value = "";
        for (let i = 0; i < autogenerated.length; i++) {
            if(elem == "PanCode"){
                value = autogenerated[i].value.substring(0, 2);
            }else{
                value = autogenerated[i].value;
            }
            if(/^[0-9]{5}$/.test(autogenerated[i].value) && array.includes(value)) {
                arr.push(array.indexOf(value) + 1);
            }else{
                autogenerated[i].value = "";
                autogenerated[i].placeholder = `INCORRECT NUMBER OF DIGITS/${word}`;
            }
        }
        return arr;
    }


    //controlla che l'oggetto creato non abbia elementi empty
    const checkEmptyObj = (obj) => {
        let arr = Object.keys(obj);
        let bool = true;
        arr.forEach(elem => {
            if (obj[elem] === "" || obj[elem].length == 0) {
                bool = false;
                stampaErrori.innerHTML = `<p style="color:red;font-weight: bold;text-align:center;">WARNING: NOT ALL ELEMENT ARE SELECTED</p>`;
            }
        })
        return bool;
    }




    btn.onclick = () =>  sendRequest(btn);



    btnUpdate.onclick = () => sendRequest(btnUpdate);




    const sendRequest = (elem) => {
        stampaErrori.innerHTML = "";
        //controllo dell'id per update
        if (elem == btnUpdate) {
            if(updateForm.value == "") {
                updateForm.placeholder = "ID EMPTY";
            }
            obj.id = parseInt(updateForm.value);
        }
        //creazione 
        obj.name = nome.value;
        obj.description = description.value;
        radioCheck(radio1, "enabled");
        obj["type"] = parseInt(select.value);
        radioCheck(radio2, "multisession");
        obj.peripherals = checkBoxCheck();
        obj["bankCodes"] = autogeneratedCheck("BankCode", error1, arrBankCode);
        obj["bins"] = autogeneratedCheck("PanCode", error2, arrPanCode);
        //controlla che l'oggetto creato non abbia elementi empty
        if (checkEmptyObj(obj)) {
            //se il bottone cliccato Ã¨ send fa la save
            if (elem == btn) {
                let finalUrl = url + "/save";
                request(finalUrl, 'POST', obj, 'INVIATI');
            } else{ //altrimenti l'update
                let finalUrl = url + "/update";
                request(finalUrl, 'PUT', obj, 'AGGIORNATI');
            }
        }
    }



    //request alla restApi
    async function request(url, method, obj, word) {
        try {
            let body = JSON.stringify(obj)
            if (method == 'GET') {
                body = null;
            }
            let response = await fetch(buildRequest(url, method, body));

            if (response.ok) {
                if (method == 'POST' || method == 'PUT') {
                    stampaErrori.innerHTML = `<p style="text-align:center;">VALORI CORRETTAMENTE ${word}</p>`;
                   // const myTimeout = setTimeout(reload, 4000);
                } else {
                    return response.json();
                }
            }
        } catch (error) {
            console.log(error);
        }
    }



    //builder della request
    const buildRequest = (url, met, bod) => {
        let headers = new Headers({
            "Accept": "application/json",
            "Content-Type": "application/json"
        });

        return new Request(url, {
            method: met,
            headers: headers,
            body: bod
        });
    }



})(); 


